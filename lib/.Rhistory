addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 1, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 3, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 30, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 300, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 30000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 3000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 1000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qHH <- colorQuantile("magma", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qHH <- colorQuantile("YlRe", zCrimes$Average.Household.Size, n = 5)
qHH <- colorQuantile("YlOrRd", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qMA <- colorQuantile("YlOrRd", zCrimes$Median.Age, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Median.Age),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.8 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qMA, values = ~Median.Age, opacity = 1)
qMA <- colorQuantile("YlOrRd", zCrimes$Median.Age, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qMA(Median.Age),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.8 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qMA, values = ~Median.Age, opacity = 1)
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
FunMoranMap(palette=FunPaletteMoran(four.way=TRUE ), sizes=FunSigSize(scale=0.8), z.score=TRUE)
traceback()
FunCloroplethMap(palette=FunPalette(bin.n=6))
FunMoranMap(palette=FunPaletteMoran(four.way=TRUE ), sizes=FunSigSize(scale=0.8), z.score=TRUE)
plot(zCrimes$Median.Age, zCrimes$crimes)
library(topicmodels)
install.packages("topicmodels")
length(files)
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
length(files)
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
length(files)
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
length(files)
setwd("~/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project4-sec1--sec1proj4_grp7/lib")
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
length(files)
articles <- matrix(nrow = length(files), ncol = 3)
colnames(articles) <- c("doc", "term", "freq")
i <- 1
for(x in files){
articles[i, ] <- c(i, readChar(x, file.info(x)$size), 0)
i <- i + 1
}
articles[1,]
articles[1,] <- strsplit(articles[1,],"\n")[[1]]
articles[1,]
for(x in files){
articles[i, ] <- c(i, readChar(x, file.info(x)$size), 0)
i <- i + 1
}
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
articles <- matrix(nrow = length(files), ncol = 3)
colnames(articles) <- c("doc", "term", "freq")
i <- 1
for(x in files){
articles[i, ] <- c(i, readChar(x, file.info(x)$size), 0)
i <- i + 1
}
articles[1,]
a <- strsplit(articles[1,],"\n")[[1]]
a
a <- strsplit(articles[1,2],"\n")[[1]]
a
groundTruth <- groundTruth[groundTruth!=""]
a <- a[a!=""]
a
a <- strsplit(a," ")[[1]]
a
a <- strsplit(articles[1,2],c("\n", " "))[[1]]
a
a <- strsplit(articles[1,2],c("\n", " "), fixed = T)[[1]]
a
articles[1,2]
a <- strsplit(articles[1,2],c("\n", " "), fixed = T)[[1]]
a <- a[a!=""]
a <- strsplit(a," ")[[1]]
a
a <- strsplit(articles[1,2],c("\n", " "), fixed = T)[[1]]
a <- strsplit(articles[1,2],c("\n", " "), fixed = T)[[1]]
a <- a[a!=""]
a <- strsplit(a," ")
a
a <- unlist(a)
a
b <- list()
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
library(tm)
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
a
summary(a)
typeof(a)
a$group1_00000005.txt
str(a)
l <- LDA(a)
library(topicmodels)
l <- LDA(a)
adtm <- DocumentTermMatrix(a)
l <- LDA(a)
adtm$terms
adtm$dimnames$Terms
a <- tm_map(a, tolower)
adtm <- DocumentTermMatrix(a)
l <- LDA(a)
data("AssociatedPress")
AssociatedPress
adtm
l <- LDA(AssociatedPress)
l <- LDA(a, k = 2, control = list(seed = 1234))
adtm
summary(AssociatedPress)
summary(adtm)
adtm
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
a <- tm_map(a, tolower)
a <- tm_map(a, removeNumbers)
a <- tm_map(a, removePunctuation)
a <- tm_map(a , stripWhitespace)
a <- tm_map(a, tolower)
adtm <- DocumentTermMatrix(a)
l <- LDA(a, k = 2, control = list(seed = 1234))
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
a <- tm_map(a, tolower)
head(adtm)
head(a)
l <- LDA(AssociatedPress, k = 2, control = list(seed = 1234))
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
y <- tidy(a)
library(broom)
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
a <- tidy(a)
tidy(adtm)
library(tidytext)
tidytext::tidy(a)
tidytext::tidy(adtm)
l <- LDA(tidytext::tidy(adtm), k = 2, control = list(seed = 1234))
DocumentTermMatrix(tidytext::tidy(adtm))
a  <-Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
adtm <- DocumentTermMatrix(a)
adtm
a$
a <- tm_map(a, content_transformer(tolower))
adtm <- DocumentTermMatrix(a)
l <- LDA(, k = 2, control = list(seed = 1234))
l <- LDA(a, k = 2, control = list(seed = 1234))
l <- LDA(adtm, k = 2, control = list(seed = 1234))
summary(l)
ap_topics <- tidy(l, matrix = "beta")
ap_topics
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
library(tidyverse)
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
sw <- c("the", "and", "for", "that", "with", "this", "will")
sw <- c("the", "and", "for", "that", "with", "this", "will")
a <- tm_map(a, removeWords, sw)
adtm <- DocumentTermMatrix(a)
l <- LDA(adtm, k = 2, control = list(seed = 1234))
summary(l)
ap_topics <- tidy(l, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
a <- tm_map(a , stripWhitespace)
adtm <- DocumentTermMatrix(a)
l <- LDA(adtm, k = 2, control = list(seed = 1234))
ap_topics <- tidy(l, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(20, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
all_tokens       <- findFreqTerms(adtm, 1)
tokens_to_remove <- setdiff(all_tokens,GradyAugmented)
ap_top_terms
sw <- c("the", "and", "for", "that", "with", "this", "will", "are", "has", " the")
a <- tm_map(a , stripWhitespace)
a <- tm_map(a, removeWords, sw)
adtm <- DocumentTermMatrix(a)
l <- LDA(adtm, k = 2, control = list(seed = 1234))
ap_topics <- tidy(l, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(20, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
beta_spread <- ap_topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_spread
library(tm)
library(topicmodels)
library(tidytext)
library(tidyverse)
a  <- Corpus(DirSource("../data/ground_truth/"), readerControl = list(language="lat")) #specifies the exact folder where my text file(s) is for analysis with tm.
a <- tm_map(a, content_transformer(tolower))
sw <- c("the", "and", "for", "that", "with", "this", "will", "are", "has", "not")
a <- tm_map(a , stripWhitespace)
a <- tm_map(a, removeWords, sw)
adtm <- DocumentTermMatrix(a)
l <- LDA(adtm, k = 2, control = list(seed = 1234))
ap_topics <- tidy(l, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(20, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
load(file = "../output/dict.RData")
letters
out <-
!letters %in% "a"
out <-
v <- !letters %in% "a"
v
out <-
v <- letters[!letters %in% "a"]
v
substr(w, 1,1)
w <- "food"
substr(w, 1,1)
beg <- substr(w, 1,i - 1)
i <- 1
beg <- substr(w, 1,i - 1)
beg
end <- substr(w, i + 1,nchar(w))
end
beg + v + end
beg
paste(beg, v, end)
paste(beg, v, end, collapse = T)
paste(beg, v, end, sep = "")
paste(beg, v, end, sep = "") %in% dict
!paste(beg, v, end, sep = "") %in% dict
candidates <- paste(beg, v, end, sep = "")
candidates[candidates %in% dict]
w <- "food"
for(i in 1:nchar(w)){
l <- substr(w, i,i)
v <- letters[!letters %in% l]
beg <- substr(w, 1,i - 1)
end <- substr(w, i + 1,nchar(w))
candidates <- paste(beg, v, end, sep = "")
candidates[candidates %in% dict]
}
w <- "food"
for(i in 1:nchar(w)){
l <- substr(w, i,i)
v <- letters[!letters %in% l]
beg <- substr(w, 1,i - 1)
end <- substr(w, i + 1,nchar(w))
candidates <- paste(beg, v, end, sep = "")
candidates <- candidates[candidates %in% dict]
}
candidates
w <- "food"
cand <- c()
for(i in 1:nchar(w)){
l <- substr(w, i,i)
v <- letters[!letters %in% l]
beg <- substr(w, 1,i - 1)
end <- substr(w, i + 1,nchar(w))
candidates <- paste(beg, v, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
cand
for(i in 1:nchar(w)){
for(j in 1:nchar(w)){
if(j > i){
l_i <- substr(w, i,i)
l_j <- substr(w, j,j)
v_i <- letters[!letters %in% l_i]
v_j <- letters[!letters %in% l_j]
beg <- substr(w, 1,i - 1)
mid <- substr(w, i + 1, j - 1)
end <- substr(w, j + 1,nchar(w))
candidates <- paste(beg, v_i, mid, v_j, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
}
}
cand
w <- "cat"
cand <- c()
for(i in 1:nchar(w)){
l <- substr(w, i,i)
v <- letters[!letters %in% l]
beg <- substr(w, 1,i - 1)
end <- substr(w, i + 1,nchar(w))
candidates <- paste(beg, v, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
for(i in 1:nchar(w)){
for(j in 1:nchar(w)){
if(j > i){
l_i <- substr(w, i,i)
l_j <- substr(w, j,j)
v_i <- letters[!letters %in% l_i]
v_j <- letters[!letters %in% l_j]
beg <- substr(w, 1,i - 1)
mid <- substr(w, i + 1, j - 1)
end <- substr(w, j + 1,nchar(w))
candidates <- paste(beg, v_i, mid, v_j, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
}
}
cand
differCandidates <- function(w){
cand <- c()
for(i in 1:nchar(w)){
l <- substr(w, i,i)
v <- letters[!letters %in% l]
beg <- substr(w, 1,i - 1)
end <- substr(w, i + 1,nchar(w))
candidates <- paste(beg, v, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
for(i in 1:nchar(w)){
for(j in 1:nchar(w)){
if(j > i){
l_i <- substr(w, i,i)
l_j <- substr(w, j,j)
v_i <- letters[!letters %in% l_i]
v_j <- letters[!letters %in% l_j]
beg <- substr(w, 1,i - 1)
mid <- substr(w, i + 1, j - 1)
end <- substr(w, j + 1,nchar(w))
candidates <- paste(beg, v_i, mid, v_j, end, sep = "")
cand <- c(cand, candidates[candidates %in% dict])
}
}
}
return(cand)
}
differCandidates(w)
w <- "boat"
differCandidates(w)
w <- c("boat", "cat")
differCandidates(w)
nchar(w)
l <- LDA(adtm, k = 5, control = list(seed = 1234))
ap_topics <- tidy(l, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(20, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
