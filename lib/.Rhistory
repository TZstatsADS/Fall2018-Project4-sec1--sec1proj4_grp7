coord_equal() +
stat_ellipse(data = subset(zCrimesLoc, Average.Household.Size > 3), aes(x = x, y = y), level=0.5, color = "red") +
geom_point(data = subset(zCrimesLoc, Average.Household.Size > 3), aes(x = mean(x), y = mean(y)), color = "red", size = 0.5) +
stat_ellipse(data = subset(zCrimesLoc, Average.Household.Size <= 3), aes(x = x, y = y), level=0.5, color = "orange") +
geom_point(data = subset(zCrimesLoc, Average.Household.Size <= 3), aes(x = mean(x), y = mean(y)), color = "orange", size = 0.5) +
theme_void()
regHH <- lm(log(crimes) ~ Average.Household.Size + Median.Age, data = zCrimes)
stargazer(regHH, no.space = T, type = "html")
# Multicollinearity
mc <- omcdiag(zCrimes@data[colnames(zCrimes@data) %in% c("Average.Household.Size", "Median.Age")], log(zCrimes$crimes))
kable(mc$odiags, "html", booktabs = T)
# HETEROSKEDASTICITY
# ols_test_bartlett(as.data.frame(zCrimes@data$"Average.Household.Size"), as.data.frame(zCrimes@data$"Median.Age"))
bp <- ols_test_breusch_pagan(regHH)
m <- matrix(c(bp$bp, bp$p, 1))
rownames(m) <- c("Chi2", "Prob > Chi2", "DF")
kable(m, "html", booktabs = T, row.names = T, caption = "Breusch-Pagan test")
# Spatial Dependence
spatmatrix <- poly2nb(zCrimes)
w <- nb2listw(spatmatrix, zero.policy = T)
# Moran's I
moran <- lm.morantest(regHH, listw = w, zero.policy = T)# Moranâ€™s I test for residual spatial autocorrelation
moranStat <- matrix(c(moran$statistic, moran$p.value, 1))
rownames(moranStat) <- c("statistic", "p.value", "parameter")
colnames(moranStat) <- "Moran's I (error)"
# Lagrange Multiplier test
LM <- lm.LMtests(regHH, listw = w, zero.policy = T, test = c("LMerr", "RLMerr", "LMlag", "RLMlag", "SARMA"))
LMrows <- c("statistic", "p.value", "parameter")
m <- matrix(NA, nrow = 3, ncol = length(LM))
rownames(m) <- LMrows
colnames(m) <- c("Lagrange Multiplier (error)", "Robust LM (error)", "Lagrange Multiplier (lag)", "Robust LM (lag)", "Lagrange Multiplier (SARMA)")
# colnames(m) <-
# everything in one table
for(i in 1:length(LM)){
r <- 1
for(j in LMrows){
m[r, i] <- LM[[i]][[j]]
r <- r + 1
}
}
m <- cbind(moranStat, m)
kable(m, "html", booktabs = T, row.names = T)
# Residuals
#extract residuals
zCrimes@data$lmRes[!is.na(zCrimes$crimes)] <- resid(regHH) #residual lm
#view residuals for linear model
qpal <- colorQuantile("OrRd", zCrimes@data$lmRes, n=9)
leaflet(zCrimes) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal(lmRes)
) %>%
addTiles()
#run a spatial lag model
lagModel <- lagsarlm(log(crimes) ~ Average.Household.Size + Median.Age, data = zCrimes, w,
zero.policy = T)
stargazer(lagModel, no.space = T, type = "html")
#note that rho is listed below other model coefs.
#run a spatial error model
errModel <- errorsarlm(log(crimes) ~ Average.Household.Size + Median.Age, data = zCrimes, w, zero.policy = T)
stargazer(errModel, no.space = T, type = "html")
#extract residuals for lag model
zCrimes@data$lagRes[!is.na(zCrimes$crimes)] <- resid(lagModel) #residuals lag
#view residuals for lag model
qpal<-colorQuantile("OrRd", zCrimes@data$lagRes, n=9)
leaflet(zCrimes) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal(lagRes)
) %>%
addTiles()
#extract residuals for err model
zCrimes@data$errRes[!is.na(zCrimes$crimes)] <- resid(errModel) #residual err
#compare with residuals for err model
qpal<-colorQuantile("OrRd", zCrimes@data$errRes, n=9)
leaflet(zCrimes) %>%
addPolygons(stroke = FALSE, fillOpacity = .8, smoothFactor = 0.2, color = ~qpal(errRes)
) %>%
addTiles()
centr <- gCentroid(zCrimes, byid = TRUE)  #byid tells function to add centroids per block group
# create SpatialPointsDataFrame to add all data from chi.poly@data to centr@data
centr <- SpatialPointsDataFrame(centr, data= zCrimes@data)
#Begin GWR prep: First, calculate bandwidth
#calculate optimal bandwidth for model (uses cross validation to find kernel bandwidth that
#generates best model...e.g.-kernel that minimizes RSS)
GWRbandwidth <- gwr.sel(log(crimes) ~ Average.Household.Size + Median.Age, data=centr,
coords=coordinates(centr),adapt=T)# coordinates() extracts x, y coordinates
#adapt tells function to calculate adaptive bandwidth
#run the gwr model
gwr.model <- gwr(log(crimes) ~ Average.Household.Size + Median.Age,
data=subset(centr, !is.na(crimes)), coords=coordinates, adapt=GWRbandwidth,
hatmatrix=TRUE, se.fit=TRUE)
#print the results of the model
#extract results for each variable
results<-as.data.frame(gwr.model$SDF)
#attach coefficients to original dataframe
centr$Median.AgeCoef[!is.na(zCrimes$crimes)]  <- results$Median.Age
centr$Average.Household.SizeCoef[!is.na(zCrimes$crimes)]  <- results$Average.Household.Size
#now plot the various GWR coefficients
#Does the median age influence violent crime uniformly across LA?
qpal<-colorQuantile("OrRd", centr@data$Median.Age, n=9)
leaflet(centr) %>%
addCircleMarkers(radius=3,color = ~qpal(centr@data$Median.Age)
) %>%
addTiles()
GWRbandwidth <- gwr.sel(log(crimes) ~ Average.Household.Size + Median.Age, data=centr,
coords=coordinates(centr),adapt=T)# coordinates() extracts x, y coordinates
GWRbandwidth <- gwr.sel(log(crimes) ~ Average.Household.Size + Median.Age, data=centr, verbose = F,
coords=coordinates(centr),adapt=T)# coordinates() extracts x, y coordinates
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
packages <- c("rgdal", "foreign", "gdata", "ggmap", "ggplot2",
"plyr", "rgeos", "sf", "ggrepel", "dplyr", "sp", "aspace",
"spdep", "bookdown", "stringr", "maptools", "leaflet", "broom", "stargazer",
"RColorBrewer", "mctest", "olsrr", "knitr", "spgwr", "htmlwidgets", "htmltools")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = T)) install.packages(x)
if (! (x %in% (.packages() )))  library(x, character.only = T)
})
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML("Map title")
)
map_leaflet <- leaflet() %>%
addTiles() %>%
qpal<-colorQuantile("OrRd", centr@data$Median.Age, n=9)
qpal<-colorQuantile("OrRd", centr@data$Median.Age, n=9)
leaflet(centr) %>%
addCircleMarkers(radius=3,color = ~qpal(centr@data$Median.Age)
) %>%
addTiles() %>%
addControl(title, position = "topleft", className="map-title")
## Loading and installing packages
knitr::opts_chunk$set(echo = F, message = F, warning = F)
packages <- c("rgdal", "foreign", "gdata", "ggmap", "ggplot2",
"plyr", "rgeos", "sf", "ggrepel", "dplyr", "sp", "aspace",
"spdep", "bookdown", "stringr", "maptools", "leaflet", "broom", "stargazer",
"RColorBrewer", "mctest", "olsrr", "knitr", "spgwr", "htmlwidgets", "htmltools")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = T)) install.packages(x)
if (! (x %in% (.packages() )))  library(x, character.only = T)
})
# leaflet map titles
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
#Does the average household size influence violent crime uniformly across LA?
title <- tags$div(tag.map.title, HTML("average household size on violent crime"))
qpal<-colorQuantile("OrRd", centr@data$Average.Household.Size, n=9)
leaflet(centr) %>%
addCircleMarkers(radius=3,color = ~qpal(centr@data$Average.Household.Size)
) %>%
addTiles() %>%
addControl(title, position = "topleft", className="map-title")
str(groundTruth[[1]])
files <- list.files(path="../data/ground_truth/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
groundTruth <- array(NA, c(1, length(files)))
for(x in 1:length(files)) groundTruth[,x] <- readChar(files[x], file.info(files[x])$size)
groundTruth <- strsplit(groundTruth,"\n")
files <- list.files(path="../data/tesseract/", pattern="*.txt", full.names=TRUE, recursive=FALSE)
tesseract <- array(NA, c(1, length(files)))
for(x in 1:length(files)) tesseract[,x] <- readChar(files[x], file.info(files[x])$size)
tesseract <- strsplit(tesseract,"\n")
str(groundTruth[[1]])
sapply(strsplit(str(groundTruth[[1]]), " "), length)
sapply(strsplit(str(groundTruth[[1]][1]), " "), length)
str(groundTruth[[1]][10])
str(groundTruth[[1]][10])
str(groundTruth[[1]][10])
sapply(strsplit(groundTruth[[1]][1], " "), length)
sapply(strsplit(groundTruth[[1]], " "), length)
sapply(strsplit(groundTruth[[1]], " "), length) == sapply(strsplit(tesseract[[1]], " "), length)
nWords <- function(input) sapply(strsplit(input, " "), length)
str_split(groundTruth[[1]]," ")
strsplit(groundTruth[[1]]," ")
i <- 1
turthBag <- strsplit(groundTruth[[i]]," ")
str(turthBag)
turthBag[[sameLength]]
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
for(i in 1:length(files)){
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
turthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
turthBag[[sameLength]]
}
turthBag[[sameLength]]
sameLength
truthBag[[1]]
truthBag <- strsplit(groundTruth[[i]]," ")
truthBag[[1]]
length(truthBag[[1]])
nchar(truthBag[[1]])
nchar(truthBag[[1]]) == nchar(tessBag[[1]])
strsplit(groundTruth, " ")
str(groundTruth[[1]][10])
truthBag[[i]]
truthBag[[i]]
truthWords <- truthBag[[i]]
tessWords <- tessBag[[i]]
truthWords[1]
strsplit(truthWords[k])
strsplit(truthWords[1])
strsplit(truthWords[1], "")
unlist(strsplit(truthWords[1], ""))
a <- array(NA, c(26, 26))
letters
possibilities <- c(0:9, letters)
possibilities
a <- array(NA, c(36, 36))
a
a[c("a", "b"), c("f", "e")]
a[c(1, 2), c(5, 6)]
a[c(1, 2), c(5, 6)] <- a[c(1, 2), c(5, 6)] + 1
a[c(1, 2), c(5, 6)]
a <- array(0, c(36, 36))
a[c(1, 2), c(5, 6)] <- a[c(1, 2), c(5, 6)] + 1
a[c(1, 2), c(5, 6)]
a[c(1, 1), c(5, 5)] <- a[c(1, 1), c(5, 5)] + 1
a[c(1, 2), c(5, 6)]
a[c(1, 1), c(5, 5)]
a <- array(0, c(36, 36))
possibilities <- c(0:9, letters)
for(i in 1:length(files)){
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(nWords(truthBag[[i]]) == nWords(tessBag[[i]])){
truthWords <- truthBag[[i]]
tessWords <- tessBag[[i]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
mistake <- truthLetters != tessLetters
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] =
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] + 1
}
}
}
}
}
}
}
for(i in 1:length(files)){
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(nWords(truthBag[[j]]) == nWords(tessBag[[j]])){
truthWords <- truthBag[[i]]
tessWords <- tessBag[[i]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
mistake <- truthLetters != tessLetters
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] =
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] + 1
}
}
}
}
}
}
}
for(i in 1:length(files)){
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(nWords(truthBag[[j]]) == nWords(tessBag[[j]])){
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
mistake <- truthLetters != tessLetters
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] =
a[match(truthLetters[l], possibilities),
match(tessLetters[l], possibilities)] + 1
}
}
}
}
}
}
}
i <- j <- k <- l <- 1
sameLength <- nWords(groundTruth[[i]]) == nWords(tesseract[[i]])
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
truthBag
nWords(truthBag[[j]])
length(truthBag)
truthBag[[j]]
nWords(truthBag[[j]])
length(truthBag[[j]]
length(truthBag[[j]])
length(truthBag[[j]])
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
truthWords
truthWords <- truthBag[[j]]
truthWords
nchar(truthWords[k])
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
truthLetters
tessLetters
length(truthLetters)
nchar(truthWords[k])
truthLetters[l]
match(truthLetters[l], possibilities)
for(i in 1:length(files)){
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(length(truthBag[[j]]) == length(tessBag[[j]])){
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(tolower[truthLetters[l]], possibilities),
match(tolower[tessLetters[l]], possibilities)] =
a[match(tolower[truthLetters[l]], possibilities),
match(tolower[tessLetters[l]], possibilities)] + 1
}
}
}
}
}
}
}
tolower[truthLetters[l]]
truthLetters
truthLetters
truthLetters <- unlist(strsplit(truthWords[k], ""))
truthLetters
truthBag <- strsplit(groundTruth[[i]]," ")
truthWords <- truthBag[[j]]
truthLetters <- unlist(strsplit(truthWords[k], ""))
truthLetters
truthBag <- strsplit(groundTruth[[i]]," ")
truthBag
truthWords <- truthBag[[j]]
truthWords
truthWords
nchar(truthWords[k])
truthWords
truthWords[k]
k
for(i in 1:length(files)){
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(length(truthBag[[j]]) == length(tessBag[[j]])){
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
for(l in 1:length(truthLetters)){
a[match(tolower[truthLetters[l]], possibilities),
match(tolower[tessLetters[l]], possibilities)] =
a[match(tolower[truthLetters[l]], possibilities),
match(tolower[tessLetters[l]], possibilities)] *
(truthLetters[l] != tessLetters[l]) + 1
}
}
}
}
}
}
truthLetters
length(truthLetters)
truthLetters[l]
for(i in 1:length(files)){
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : length(truthBag)){
if(length(truthBag[[j]]) == length(tessBag[[j]])){
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(tolower(truthLetters[l]), possibilities),
match(tolower(tessLetters[l]), possibilities)] =
a[match(tolower(truthLetters[l]), possibilities),
match(tolower(tessLetters[l]), possibilities)] + 1
}
}
}
}
}
}
}
length(truthBag[[j]])
length(tessBag[[j]])
j
i
tessBag
truthBag
for(i in 1:length(files)){
truthBag <- strsplit(groundTruth[[i]]," ")
tessBag <- strsplit(tesseract[[i]]," ")
for(j in 1 : min(length(truthBag), length(tessBag))){
if(length(truthBag[[j]]) == length(tessBag[[j]])){
truthWords <- truthBag[[j]]
tessWords <- tessBag[[j]]
for(k in 1: length(truthWords)){
if((nchar(truthWords[k]) == nchar(tessWords[k]))){
truthLetters <- unlist(strsplit(truthWords[k], ""))
tessLetters <- unlist(strsplit(tessWords[k], ""))
for(l in 1:length(truthLetters)){
if(truthLetters[l] != tessLetters[l]){
a[match(tolower(truthLetters[l]), possibilities),
match(tolower(tessLetters[l]), possibilities)] =
a[match(tolower(truthLetters[l]), possibilities),
match(tolower(tessLetters[l]), possibilities)] + 1
}
}
}
}
}
}
}
a
a
match(22, possibilities)
possibilities[22]
possibilities[19]
load("../output/dict.RData")
load("../output/dict2.RData")
load("../output/digrams.RData")
d2 <- dict2[nchar(dict2[,1]) < 16,]
d2 <- d2[nchar(d2[,1]) > 1,] # no single character words
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
# cat(i, " ", k, " ", l)
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
table(as.numeric(d2[,2]))
confMat <- a
save(confMat, file = "../output/confusionMatrix.RData")
