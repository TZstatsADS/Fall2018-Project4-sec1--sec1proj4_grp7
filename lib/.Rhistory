bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles()
leaflet(zCrimes) %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~pal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles()
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~pal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles()
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1)
qpal <- colorQuantile("RdYlBu", zCrimes$crimes, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1)
qpal <- colorQuantile("YlGnBu", zCrimes$crimes, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1,
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1)
qHH <- colorQuantile("inferno", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size)
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
qHH <- colorQuantile("inferno", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size)
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip), opacity = 0.9 %>%
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = ~zCrimes$Average.Household.Size*200, popup = ~zCrimes$zip, opacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 1, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 3, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 30, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 300, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 30000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 3000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 1000, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.9 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qHH <- colorQuantile("magma", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qHH <- colorQuantile("YlRe", zCrimes$Average.Household.Size, n = 5)
qHH <- colorQuantile("YlOrRd", zCrimes$Average.Household.Size, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Average.Household.Size),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.5 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qHH, values = ~Average.Household.Size, opacity = 1)
qMA <- colorQuantile("YlOrRd", zCrimes$Median.Age, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qHH(Median.Age),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.8 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qMA, values = ~Median.Age, opacity = 1)
qMA <- colorQuantile("YlOrRd", zCrimes$Median.Age, n = 5)
leaflet(zCrimes) %>% addPolygons(weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
color = ~qpal(crimes),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addCircles(lng = ~centroids$x, lat = ~centroids$y, weight = 1, color = ~qMA(Median.Age),
radius = 800, popup = ~zCrimes$zip, opacity = 0.9, fillOpacity = 0.8 ) %>%
addTiles() %>%
addLegend(pal = qpal, values = ~crimes, opacity = 1) %>%
addLegend(pal = qMA, values = ~Median.Age, opacity = 1)
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
source("../Exploratory Research/lisa.R")
FunMoranMap()
FunMoranMap(palette=FunPaletteMoran(four.way=TRUE ), sizes=FunSigSize(scale=0.8), z.score=TRUE)
traceback()
FunCloroplethMap(palette=FunPalette(bin.n=6))
FunMoranMap(palette=FunPaletteMoran(four.way=TRUE ), sizes=FunSigSize(scale=0.8), z.score=TRUE)
plot(zCrimes$Median.Age, zCrimes$crimes)
load("../output/dict.RData")
dict <- as.matrix(dict)
setwd("~/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project4-sec1--sec1proj4_grp7/lib")
load("../output/dict.RData")
dict <- as.matrix(dict)
dict <- dict[nchar(dict) > 1] # no single character words
dict <- unique(dict)
dict
a <- array(NA, c(10, 9*10/2, 26, 26))
a[1,1,,]
#use word of length 3 as an example
wordlist <- c('abc', 'def','ghi')
wordlist[1]
length(wordlist[1])
nchar(wordlist[1])
(wordlist[1], 1, 1)
(wordlist[1], 1, 2)
substr(wordlist[1], 1, 2)
substr(wordlist[1], 1)
substr(wordlist[1], 1, 1)
match("a", letters)
match("c", letters)
#use word of length 3 as an example
wordlist <- c('abc', 'def','ghi')
for(i in wordlist){
n <- nchar(wordlist[i])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
a[n, counter, match(substr(wordlist[i], k, k), letters),
match(substr(wordlist[i], l, l), letters)] <- 1
counter <- counter + 1
}
}
}
}
n <- nchar(wordlist[i])
n
n <- nchar(i)
n <- c(0,0,0)
n <- c(0,0,0)
l <- 1
for(i in wordlist){
n[l] <- nchar(i)
l <- l + 1
}
n
#use word of length 3 as an example
wordlist <- c('abc', 'def','ghi4')
#use word of length 3 as an example
wordlist <- c('abc', 'def','ghif')
n <- c(0,0,0)
l <- 1
for(i in wordlist){
n[l] <- nchar(i)
l <- l + 1
}
n
for(i in wordlist){
n <- nchar(i)
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
a[n, counter, match(substr(i, k, k), letters),
match(substr(i, l, l), letters)] <- 1
counter <- counter + 1
}
}
}
}
a[3, ,,]
a[3, 1,,]
a[4, 1,,]
sort(nchar(dict), decreasing = T)
d <- dict[nchar(dict) < 16]
sort(nchar(d), decreasing = T)
a <- array(0, c(15, 9*10/2, 26, 26))
for(i in d){
n <- nchar(i)
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
a[n, counter, match(substr(i, k, k), letters),
match(substr(i, l, l), letters)] <- 1
counter <- counter + 1
}
}
}
}
maxN <- 15
N <- 15
N <- 15
a <- array(0, c(N, (N-1)*N/2, 26, 26))
for(i in d){
n <- nchar(i)
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
a[n, counter, match(substr(i, k, k), letters),
match(substr(i, l, l), letters)] <- 1
counter <- counter + 1
}
}
}
}
a[3, 1,,]
load("../output/dict2.RData")
dict2 <- as.matrix(dict2)
dict2 <- dict[nchar(dict2) > 1] # no single character words
load("../output/dict2.RData")
dict2 <- as.matrix(dict2)
head(dict2)
dict2$error <- 0
head(dict2)
load("../output/dict2.RData")
dict2 <- as.matrix(dict2)
cbind(dict2, rep(0, nrow(dict2)))
dict2 <- cbind(dict2, rep(0, nrow(dict2)))
dict2
colnames(dict2) <- c("word, "error")
colnames(dict2) <- c("word", "error")
head(dict2)
for(i in 1:nrow(dict2)){
n <- nchar(dict2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
if(a[n, counter, match(substr(dict2[i,1], k, k), letters),
match(substr(dict2[i,1], l, l), letters)] == 0){
dict2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
head(dict2)
tail(dict2)
tail(dict2, 50)
for(i in 1:nrow(dict2)){
n <- nchar(dict2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
if(a[n, counter, match(substr(dict2[i,1], k, k), letters),
match(substr(dict2[i,1], l, l), letters)] == 0){
dict2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
d2 <- dict2[nchar(dict2) < 16]
d2 <- dict2[nchar(dict2) < 16]
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
d2 <- dict2[nchar(dict2[,1]) < 16]
head(d2)
head(dict2)
d2 <- dict2[nchar(dict2[,1]) < 16,]
head(d2)
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
i
k
l
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
print(i)
print(k)
print(l)
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
for(i in 1:nrow(d2)){
n <- nchar(d2[i,1])
counter <- 1
for(k in 1 : (n-1)){
for(l in 2:n){
if(k < l){
print(cat(i, " ", k, " ", l))
if(a[n, counter, match(substr(d2[i,1], k, k), letters),
match(substr(d2[i,1], l, l), letters)] == 0){
d2[i,2] <- 1
stop = TRUE
break
}
counter <- counter + 1
if (stop){break}
}
if (stop){break}
}
if (stop){break}
}
}
